#!/bin/bash
#
# snapshot
# version 20170130_123456
# (c) 2017 by cytopyge
#
#
#=====================================
# initial settings
#=====================================
#
#
# source locations
#-----------------
source="/media/user/data01"
excluded=".Trash-1000/"
#
# destination locations
#----------------------
location_snapshot="/media/user/Transcend2TB"
location_backup="/media/user/Transcend2TB"
location_archive="/media/user/Transcend2TB"
# remote: [user]@[server]:[path]
#
# maximum days
#--------------
# between full backups
time_full=432000 # 5 days
# that snapshots are kept
time_mxss=86400exit
days_mxss=10 #864000^=10 days
# between archivestime
time_mxar=2592000 # 30 days
#
#
# checking mountpoints
#---------------------
mountpoint -q $location_snapshot
if [ `echo $?` -eq 0 ] ;
  then echo "location_snapshot" $location_snapshot "is a mountpoint"
else echo $location_snapshot "is not a mountpoint"
  echo "exiting"
  exit
fi
mountpoint -q $location_backup
if [ `echo $?` -eq 0 ] ;
  then echo "location_backup" $location_backup "is a mountpoint"
else echo $location_backup "is not a mountpoint"
  echo "exiting"
  exit
fi
mountpoint -q $location_archive
if [ `echo $?` -eq 0 ] ;
  then echo "location_archive" $location_archive "is a mountpoint"
else echo $location_archive "is not a mountpoint"
  echo "exiting"
  exit
fi
#
# setting destinations
#---------------------
destsnap="$location_snapshot""/___snapshot___/"
destfull="$location_backup""/___backup___/"
destarch="$location_archive""/___archive___/"
#
#manual confirmation
#echo "backup to "$destination "?"
#read -p "continue? [Y/n]" -n 1 -r
#echo
#if [[ $REPLY =~ ^[Nn]$ ]]
# then exit
#fi
#
#
#====================================
# snapshotting
#====================================
#
#
# timestamp
#----------
timestamp=`date "+%Y%m%d%H%M%S"`
ts_year=${timestamp:0:4}
ts_month=${timestamp:4:2}
ts_day=${timestamp:6:2}
ts_hour=${timestamp:8:2}
ts_minute=${timestamp:10:2}
ts_second=${timestamp:12:2}
#ts_epoch=$(expr $(`date --date "${timestamp:0:8}"" ""${timestamp:8:4}" "+%s"`) + $ts_second)
#string_for_epoch2="${timestamp:0:8}"" ""${timestamp:8:4}"
#echo "string for epoch2" $string_for_epoch2
#ts_epoch2=`date --date "$string_for_epoch2" "+%s"`
#calc_epoch=$(expr $ts_epoch2 + $ts_second)
#calc_epoch=$(expr `date --date "$string_for_epoch2" "+%s"` + $ts_second)
#ts_epoch=`date "+%s"`
ts_epoch=$(expr `date --date "${timestamp:0:8}"" ""${timestamp:8:4}" "+%s"` + $ts_second)
echo $ts_epoch
#
# snapshot location
#------------------
snapshot="$destsnap""$timestamp/"
lastsnap="$destsnap""lastsnap"
# firstrun
if [ -d $destsnap ] ; then
  firstrun=0
  else
  firstrun=1
  #ask user for creating destinations
  # create directories
  mkdir -p $destsnap
  mkdir -p $destfull
  mkdir -p $destarch
fi
if [ $firstrun -eq 1 ] ; then
  echo "firstrun; perform a second run to check error messages below"
fi
#
# rsync snap configuration
#-------------------------
snapoptions="--progress --archive --verbose --one-file-system \
 --hard-links --human-readable --inplace --numeric-ids -F \
  --stats --partial \
  --exclude="$excluded" \
  --link-dest="$lastsnap" \
  --log-file=$destsnap"snapshot"$timestamp".log""
  # --dry-run\
  # paths are relative to the source location
#
# rsync snap syncronization
#--------------------------
echo
echo ">>> creating snapshot $timestamp ..."
echo
rsync $snapoptions $source $snapshot
# read time from previous symlink lastsnap
# timelastsnap=$(basename $(readlink $lastsnap))
#
#
if [ $firstrun -eq 0 ] ; then
  # remove (previous) symlink lastsnap
  rm -f $lastsnap
  # delete snapshots older than days_mxss old
  find $destsnap -type d -mtime +$days_mxss -exec rm -rf {} \;
  # delete *.log files
  find $destsnap -mtime +$days_mxss -iname "*.log" -exec rm -f {} \;
  # alternative method
  # find $destsnap -mtime +$days_mxss -delete
fi
# create (new) symlink
# (in $snapshot to $lastsnap for --linkdest)
ln -s $snapshot $lastsnap
#
#
#====================================
# full backup of last snapshot
#====================================
#
#
# backup location
#----------------
full="$destfull""$timestamp/"
lastfull="$destfull""lastfull"
# if firstrun=1 or lastfull more than maxdayslastfull ago then start new full
timelastfull=$(basename $(readlink $lastfull))
echo "timelastfull" $timelastfull
timelastfull_epoch=$(expr `date --date "${timelastfull:0:8}"" ""${timelastfull:8:4}" "+%s"` + "${timelastfull:12:2}")
daysagosincelastfull=$(expr $ts_day - ${timelastfull:6:2})
echo
echo $daysagosincelastfull "day(s) ago since last full backup" \
$timelastfull
time_dt_full_epoch=$(expr $ts_epoch - $timelastfull_epoch)
if [ $firstrun -eq 1 ] || [ $time_dt_full_epoch -gt $time_full ]; then
  # start full backup with rsync
  # rsync full configuration
  fulloptions="-rLptgoDv --progress --stats --partial \
  --log-file=$destfull"full"$timestamp".log""
  # --dry-run
  # full backup of $snapshot
  echo
  echo ">>> creating backup of last snapshot" $timestamp "..."
  echo
  rsync $fulloptions $snapshot $full
  #remove previous simlink to full
  if [ $firstrun -eq 0 ] ; then
  rm -f $lastfull
  fi
  #create new simlink to full
  ln -s $full $lastfull
else
  echo ">>> full backup postponed"
  echo
fi
#
#
#====================================
# archiving last snapshot
#====================================
#
#
# archive location
#-----------------
archive="$destarch""$timestamp/"
lastarch="$destarch""lastarch"
# if firstrun=1 or lastfull more than archdaysthreshold ago then start new full
timelastarch=$(basename $(readlink $lastarch))
echo "timelastarch" $timelastarch
timelastarch_epoch=$(expr `date --date "${timelastarch:0:8}"" ""${timelastarch:8:4}" "+%s"` + "${timelastarch:12:2}")
daysagosincelastarch=$(expr $ts_day - ${timelastarch:6:2})
echo
echo $daysagosincelastarch "day(s) ago last archive created" \
$timelastarch
time_dt_arch_epoch=$(expr $ts_epoch - $timelastarch_epoch)
if [ $firstrun -eq 1 ] || [ $time_dt_arch_epoch -gt $time_mxar ]; then
  # start archiving with rsync
  # rsync archive configuration
  archoptions="-rLptgoDv --progress --stats --partial \
  --log-file=$destarch"archive"$timestamp".log""
  # --dry-run\
  # rsync archiving last $snapshot
  echo
  echo ">>> start archiving last snapshot" \
  $timestamp "..."
  echo
  rsync $archoptions $snapshot $archive
  #remove previous simlink to archive
  if [ $firstrun -eq 0 ] ; then
  rm -f $lastarch
  fi
  #create new simlink to archive
  ln -s $archive $lastarch
else
  echo ">>> archival postponed"
fi
